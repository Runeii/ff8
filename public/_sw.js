const S="ff8-gl-cache-v1";const p=e=>{let t;const o=new Set,r=(i,v)=>{const h=typeof i=="function"?i(t):i;if(!Object.is(h,t)){const L=t;t=v??(typeof h!="object"||h===null)?h:Object.assign({},t,h),o.forEach(W=>W(t,L))}},a=()=>t,f={setState:r,getState:a,getInitialState:()=>s,subscribe:i=>(o.add(i),()=>o.delete(i))},s=t=e(r,a,f);return f},A=e=>e?p(e):p,m={isEnablingOffline:!1,isOfflineEnabled:!1,progress:{current:0,total:0}},F=()=>{const{getState:e,setState:t,subscribe:o}=A(()=>structuredClone(m)),r=()=>{const s=navigator.serviceWorker?.controller;if(!s){console.warn("Service worker not ready, cannot enable offline mode");return}s.postMessage({type:"RECOVER_STATE"})},a=async()=>{const s=navigator.serviceWorker?.controller;if(!s){console.warn("Service worker not ready, cannot enable offline mode");return}s.postMessage({type:"ENABLE_OFFLINE"})},n=async()=>{const s=navigator.serviceWorker?.controller;if(!s){console.warn("Service worker not ready, cannot disable offline mode");return}s.postMessage({type:"DISABLE_OFFLINE"})},c=async()=>new Promise(s=>{if(navigator.serviceWorker?.controller){s(navigator.serviceWorker.controller);return}const i=()=>{navigator.serviceWorker?.controller&&(navigator.serviceWorker.removeEventListener("controllerchange",i),s(navigator.serviceWorker.controller))};navigator.serviceWorker.addEventListener("controllerchange",i)}),f=async()=>{try{const s=await navigator.serviceWorker.register("/_sw.js");console.log("Service worker registered:",s.scope),navigator.serviceWorker.addEventListener("message",v=>{t(v.data)});const i=await navigator.serviceWorker.ready;console.log("Service worker is ready:",i.active?.state),await c(),await r()}catch(s){console.error("OfflineController initialization failed:",s)}};return"serviceWorker"in navigator&&f(),{getState:e,subscribe:o,enableOfflineMode:a,disableOfflineMode:n}};F();const g="offline-state",y="preserved-state",k=e=>new Promise((t,o)=>{e.onsuccess=()=>t(e.result),e.onerror=()=>o(e.error)}),O=()=>new Promise((e,t)=>{const o=indexedDB.open("OfflineSettings",2);o.onerror=()=>t(o.error),o.onupgradeneeded=r=>{const a=r.target.result;a.objectStoreNames.contains(g)||a.createObjectStore(g)},o.onsuccess=r=>e(r.target.result)}),C=async()=>{const r=(await O()).transaction([g],"readonly").objectStore(g).get(y);return k(r).catch(()=>({}))},_=async e=>{const a=(await O()).transaction([g],"readwrite").objectStore(g).put(e,y);return k(a)},I=self,u=structuredClone(m),E=()=>u,M=async()=>{(await I.clients.matchAll()).forEach(t=>t.postMessage(u))},d=async e=>{Object.assign(u,e),await _(u),await M()},N=async()=>{console.log("Recovering Service Worker State:",u);const e=await C();await d(e)},R=async e=>{const t=new URL(e.url);if(!["http:","https:"].includes(t.protocol))return fetch(e);const{isOfflineEnabled:o}=await E();if(!o)return fetch(e);const r=await caches.match(e);if(r)return console.log(`Serving from cache: ${t.pathname}`),r;try{const a=await fetch(e);return a.ok&&e.method==="GET"&&(await caches.open(S)).put(e,a.clone()),a}catch(a){if(console.error(`Fetch failed for ${t.pathname}:`,a),e.destination==="document"){const n=await caches.match("/");if(n)return console.log("Serving fallback page"),n}throw new Error("Fetch failed and no cached version available")}},P=async(e,t)=>{const o=n=>new Promise(c=>setTimeout(c,n)),r=()=>new Promise(n=>{if(navigator.onLine){n();return}const c=()=>{window.removeEventListener("online",c),n()};window.addEventListener("online",c)}),a=async()=>{navigator.onLine||(console.log("Network offline, waiting for connection..."),await r());try{const n=await fetch(e,{signal:t});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n}catch(n){throw(n instanceof TypeError||n instanceof TypeError&&n.message.includes("NetworkError"))&&(console.log("Network error detected, waiting for connection..."),await r()),n}};for(;;)try{return await a()}catch(n){console.log(`Fetch failed for ${e}, retrying in 2 seconds...`,n),await o(2e3)}},$="/custom-manifest.json",j=async()=>{const e=await fetch($);if(!e.ok)throw new Error(`Failed to load manifest: ${e.status}`);const t=await e.json();if(!Array.isArray(t))throw new Error("Manifest must be a JSON array");return console.log(`Loaded ${t.length} files from custom manifest`),t},B=async(e,t,o,r)=>{const a=Array.from({length:Math.ceil(t.length/e)},(n,c)=>t.slice(c*e,(c+1)*e));for(const[n,c]of a.entries()){if(r?.aborted){console.warn("Batch processing aborted");break}await Promise.all(c.map((f,s)=>o(f,n*e+s,c)))}},U=async(e,t)=>{const o=await caches.open(S);if(await o.match(e))return;const r=await P(t);if(!r.ok)throw new Error(`Failed to fetch file: ${t}`);console.log(`Caching file: ${e} -> ${t}`),await o.put(e,r);const{progress:a}=E();await d({progress:{...a,current:a.current+1}})},D=e=>new Promise(t=>setTimeout(t,e));let b=!1,l=null;const x=async()=>{if(b)return;b=!0,await d({isEnablingOffline:!0,isOfflineEnabled:!1});const e=await j(),t=E();t.progress.total&&t.progress.total!==e.length&&await T();const o=E();if(await d({isEnablingOffline:!0,isOfflineEnabled:!1,progress:{...o.progress,total:e.length}}),await D(1e3),l=new AbortController,await B(20,e,async r=>{await U(r,r)},l.signal),!l||l.signal.aborted){console.warn("Offline mode enabling was aborted");return}await d({isEnablingOffline:!1,isOfflineEnabled:!0})},T=async()=>{b=!1,l&&(l.abort(),l=null),await d({isEnablingOffline:!1,isOfflineEnabled:!1,progress:{current:0,total:0}});const e=await caches.keys();await Promise.all(e.map(t=>caches.delete(t)))},w=self,H=async({type:e})=>{switch(console.log(`Service Worker: Received message of type ${e}`),e){case"RECOVER_STATE":await N();break;case"ENABLE_OFFLINE":await x();break;case"DISABLE_OFFLINE":await T();break;default:console.warn(`Service Worker: Unknown message type: ${e}`)}};w.addEventListener("message",e=>H(e.data));w.addEventListener("install",()=>{console.log("Service Worker: Installing"),w.skipWaiting()});w.addEventListener("activate",e=>{console.log("Service Worker: Activating"),e.waitUntil(w.clients.claim().then(()=>{console.log("Service Worker: Claimed all clients")}))});w.addEventListener("fetch",e=>{e.respondWith(R(e.request))});
