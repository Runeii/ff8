/* eslint-disable */
// @ts-nocheck

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./optimized/base/models/o028.gltf --types --keepgroups --exportdefault --output=./gltf/o028.tsx 
*/

import * as THREE from 'three'
import React, { useImperativeHandle } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations } from '@react-three/drei';
import { useFragmentedGLTFLoader } from '../useFragmentedGLTFLoader'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'o028_action_000' | 'o028_action_001' | 'o028_action_002' | 'o028_action_003' | 'o028_action_004' | 'o028_action_005' | 'o028_action_006' | 'o028_action_007' | 'o028_action_008' | 'o028_action_009' | 'o028_action_010' | 'o028_action_011' | 'o028_action_012' | 'o028_action_013' | 'o028_action_014' | 'o028_action_015'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    o028: THREE.SkinnedMesh
    bone_0: THREE.Bone
  }
  materials: {
    o028_texture_0: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default React.forwardRef(function o028(props: JSX.IntrinsicElements['group'], ref: React.Ref<{ actions: Record<ActionName, AnimationAction>, mesh: Group }>) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useFragmentedGLTFLoader('o028', props.mapName)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

 const formattedAnimations = useAnimations(animations, group);
 useImperativeHandle(ref, () => ({ animations: formattedAnimations, group, nodes, materials }));
   return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="o028_armature">
          <primitive object={nodes.bone_0} />
        </group>
        <skinnedMesh name="o028" geometry={nodes.o028.geometry} material={materials.o028_texture_0} skeleton={nodes.o028.skeleton} />
      </group>
    </group>
 ); })

useFragmentedGLTFLoader.preload('o028')
