/* eslint-disable */
// @ts-nocheck

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./models/d002.glb --types --exportdefault --output=./gltf/d002.tsx 
*/

import { AnimationClip, SkinnedMesh, Bone, MeshStandardMaterial, Group } from 'three'
import React, { useImperativeHandle } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'd002_act0' | 'd002_act1' | 'd002_act2'

interface GLTFAction extends AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    d002: SkinnedMesh
    root: Bone
  }
  materials: {
    d002: MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default React.forwardRef(function d002(props: JSX.IntrinsicElements['group'], ref: React.Ref<{ actions: Record<ActionName, AnimationAction>, mesh: Group }>) {
  const group = React.useRef<Group>()
  const { scene, animations } = useGLTF('/models/d002.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
    
    const formattedAnimations = useAnimations(animations, group);
    useImperativeHandle(ref, () => ({ animations: formattedAnimations, group, nodes, materials }));
      return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="d002_armature">
          <primitive object={nodes.root} />
        </group>
        <skinnedMesh name="d002" geometry={nodes.d002.geometry} material={materials.d002} skeleton={nodes.d002.skeleton} />
      </group>
    </group>
    ); })

useGLTF.preload('/models/d002.glb')
