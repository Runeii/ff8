/* eslint-disable */
// @ts-nocheck

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./optimized/base/models/d022.gltf --types --keepgroups --exportdefault --output=./gltf/d022.tsx 
*/

import * as THREE from 'three'
import React, { useImperativeHandle } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations } from '@react-three/drei';
import { useFragmentedGLTFLoader } from '../useFragmentedGLTFLoader'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'd022_action_000' | 'd022_action_001' | 'd022_action_002' | 'd022_action_003'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    d022_mesh: THREE.SkinnedMesh
    d022_mesh_1: THREE.SkinnedMesh
    bone_0: THREE.Bone
  }
  materials: {
    d022_texture_0: THREE.MeshStandardMaterial
    d022_texture_1: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default React.forwardRef(function d022(props: JSX.IntrinsicElements['group'], ref: React.Ref<{ actions: Record<ActionName, AnimationAction>, mesh: Group }>) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useFragmentedGLTFLoader('d022', props.mapName)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

 const formattedAnimations = useAnimations(animations, group);
 useImperativeHandle(ref, () => ({ animations: formattedAnimations, group, nodes, materials }));
   return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="d022_armature">
          <primitive object={nodes.bone_0} />
        </group>
        <group name="d022">
          <skinnedMesh name="d022_mesh" geometry={nodes.d022_mesh.geometry} material={materials.d022_texture_0} skeleton={nodes.d022_mesh.skeleton} />
          <skinnedMesh name="d022_mesh_1" geometry={nodes.d022_mesh_1.geometry} material={materials.d022_texture_1} skeleton={nodes.d022_mesh_1.skeleton} />
        </group>
      </group>
    </group>
 ); })

useFragmentedGLTFLoader.preload('d022')
