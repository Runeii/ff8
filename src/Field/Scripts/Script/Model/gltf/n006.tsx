/* eslint-disable */
// @ts-nocheck

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./models/n006.gltf --types --keepgroups --exportdefault --output=./gltf/n006.tsx 
*/

import * as THREE from 'three'
import React, { useImperativeHandle } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations } from '@react-three/drei';
import { useFragmentedGLTFLoader } from '../useFragmentedGLTFLoader'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'n006_action_0'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    n006_mesh: THREE.SkinnedMesh
    n006_mesh_1: THREE.SkinnedMesh
    bone_0: THREE.Bone
  }
  materials: {
    n006_texture_0: THREE.MeshStandardMaterial
    n006_texture_1: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default React.forwardRef(function n006(props: JSX.IntrinsicElements['group'], ref: React.Ref<{ actions: Record<ActionName, AnimationAction>, mesh: Group }>) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useFragmentedGLTFLoader('n006', props.mapName)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
    
    const formattedAnimations = useAnimations(animations, group);
    useImperativeHandle(ref, () => ({ animations: formattedAnimations, group, nodes, materials }));
      return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="n006_armature">
          <primitive object={nodes.bone_0} />
          <group name="n006">
            <skinnedMesh name="n006_mesh" geometry={nodes.n006_mesh.geometry} material={materials.n006_texture_0} skeleton={nodes.n006_mesh.skeleton} />
            <skinnedMesh name="n006_mesh_1" geometry={nodes.n006_mesh_1.geometry} material={materials.n006_texture_1} skeleton={nodes.n006_mesh_1.skeleton} />
          </group>
        </group>
      </group>
    </group>
    ); })

useFragmentedGLTFLoader.preload('n006')
