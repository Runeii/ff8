/* eslint-disable */
// @ts-nocheck

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./models/d073.glb --types --exportdefault --output=./gltf/d073.tsx 
*/

import { AnimationClip, SkinnedMesh, Bone, MeshStandardMaterial, Group } from 'three'
import React, { useImperativeHandle } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    d073: SkinnedMesh
    root: Bone
  }
  materials: {
    d073: MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default React.forwardRef(function d073(props: JSX.IntrinsicElements['group'], ref: React.Ref<{ actions: Record<ActionName, AnimationAction>, mesh: Group }>) {
  const { scene } = useGLTF('/models/d073.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  return (
    <group {...props} dispose={null}>
      <skinnedMesh geometry={nodes.d073.geometry} material={materials.d073} skeleton={nodes.d073.skeleton} />
      <primitive object={nodes.root} />
    </group>
    ); })

useGLTF.preload('/models/d073.glb')
